# This file is generated by [bash-completor](https://github.com/adoyle-h/bash-completor/tree/e018aca). Do not modify it manually.
#
# [Usage]
# Put "source _narser.bash" in your bashrc.
#
# If you want to debug the completion.
# Search '# Uncomment this line for debug' line in this file.
#
# [Update Script]
# bash-completor -c narser.completor.bash

# shellcheck disable=2207
# editorconfig-checker-disable

_narser_comp_cmd_opts=( -h -? )


_narser_comp_subcmd_opts_hash=( -h -? -x )

_narser_comp_subcmd_opts_ls=( -l -L -r -R -h -? )

_narser_comp_subcmd_opts_unpack=( -? -h )

declare -A _narser_comp_word_to_varname=()
_narser_comp_util_get_varname ()
{
    local name=${1:-};
    local encoded=${_narser_comp_word_to_varname[$name]:-};
    if [[ -z ${encoded} ]]; then
        encoded=${name//[^a-zA-Z_]/_};
    fi;
    echo "${encoded}"
}

_narser_comp_reply_dirs ()
{
    local IFS=$'\n';
    compopt -o nospace -o filenames;
    COMPREPLY=($(compgen -A directory -- "$cur"))
}

_narser_comp_reply_files ()
{
    local IFS=$'\n';
    compopt -o nospace -o filenames;
    COMPREPLY=($(compgen -A file -- "$cur"))
}

_narser_comp_reply_files_in_pattern ()
{
    compopt -o nospace -o filenames;
    local path;
    while read -r path; do
        if [[ $path =~ $1 ]] || [[ -d $path ]]; then
            COMPREPLY+=("$path");
        fi;
    done < <(compgen -A file -- "$cur")
}

_narser_comp_reply_list ()
{
    local IFS=', ';
    local array_list="" array_name;
    for array_name in $@;
    do
        array_list="$array_list \${${array_name}[*]}";
    done;
    array_list="${array_list[*]:1}";
    IFS=$'\n'' ';
    eval "COMPREPLY=( \$(compgen -W \"$array_list\" -- \"\$cur\") )"
}

_narser_comp_reply_words ()
{
    local IFS=$'\n';
    COMPREPLY=($(IFS=', ' compgen -W "$*" -- "${cur#=}"))
}

_narser_comp_reply_set() {
  local IFS=', '
  local array_list="" array_name
  # shellcheck disable=2068
  for array_name in $@; do
    array_list="$array_list \${_narser_comp_var_${array_name}[*]}"
  done
  array_list="${array_list[*]:1}"

  IFS=$'\n'' '
  eval "COMPREPLY=( \$(compgen -W \"$array_list\" -- \"\$cur\") )"
}

_narser_comp_subcmds=( hash cat ls pack unpack )

_narser_completions_hash() {
  if [[ ${cur:0:1} == [-+] ]]; then
    # rely options of command
    _narser_comp_reply_list _narser_comp_subcmd_opts_hash
  elif [[ ${prev:0:1} == [-+] ]]; then
    case "${prev}" in
      # rely the value of command option
      *) _narser_comp_reply_files ;;
    esac
  else
    # rely the argument of command
    _narser_comp_reply_files
  fi
}

_narser_completions_ls() {
  if [[ ${cur:0:1} == [-+] ]]; then
    # rely options of command
    _narser_comp_reply_list _narser_comp_subcmd_opts_ls
  elif [[ ${prev:0:1} == [-+] ]]; then
    case "${prev}" in
      # rely the value of command option
      *) _narser_comp_reply_files ;;
    esac
  else
    # rely the argument of command
    _narser_comp_reply_files
  fi
}

_narser_completions_unpack() {
  if [[ ${cur:0:1} == [-+] ]]; then
    # rely options of command
    _narser_comp_reply_list _narser_comp_subcmd_opts_unpack
  elif [[ ${prev:0:1} == [-+] ]]; then
    case "${prev}" in
      # rely the value of command option
      *) _narser_comp_reply_files ;;
    esac
  else
    # rely the argument of command
    _narser_comp_reply_files
  fi
}
_narser_completions_pack() { _narser_completions_hash; }
_narser_completions_cat() { _narser_completions_unpack; }

_narser_completions__fallback() {
  if [[ ${cur:0:1} == [-+] ]]; then
    # rely options of command
    _narser_comp_reply_list _narser_comp_subcmd_opts__fallback
  elif [[ ${prev:0:1} == [-+] ]]; then
    case "${prev}" in
      # rely the value of command option
      *) _narser_comp_reply_files ;;
    esac
  else
    # rely the argument of command
    _narser_comp_reply_files
  fi
}

_narser_completions() {
  COMPREPLY=()
  local cur=${COMP_WORDS[COMP_CWORD]}
  local prev=${COMP_WORDS[COMP_CWORD-1]}

  # Uncomment this line for debug
  # echo "[COMP_CWORD:$COMP_CWORD][cur:$cur][prev:$prev][WORD_COUNT:${#COMP_WORDS[*]}][COMP_WORDS:${COMP_WORDS[*]}]" >> bash-debug.log

  if (( COMP_CWORD > 1 )); then
    # Enter the subcmd completion
    local subcmd_varname
    subcmd_varname="$(_narser_comp_util_get_varname "${COMP_WORDS[1]}")"
    if type "_narser_completions_$subcmd_varname" &>/dev/null; then
      "_narser_completions_$subcmd_varname"
    else
      # If subcmd completion function not defined, use the fallback
      "_narser_completions__fallback"
    fi
    return 0
  fi

  # Enter the cmd completion
  if [[ ${cur:0:1} == [-+] ]]; then
    # rely options of command
    _narser_comp_reply_list _narser_comp_cmd_opts
  elif [[ ${prev:0:1} == [-+] ]]; then
    case "${prev}" in
      # rely the value of command option
      *) _narser_comp_reply_files ;;
    esac
  else
    # rely the argument of command
    _narser_comp_reply_list _narser_comp_subcmds
  fi
}

complete -F _narser_completions -o bashdefault narser
# vi: sw=2 ts=2
